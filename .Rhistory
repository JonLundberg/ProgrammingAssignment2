install.packages("KernSmooth")
library(KernsSmooth)
library("KernsSmooth")
library(KernSmooth)
read.table("C:\Users\Jon\Downloads\rprog_data_quiz1_data.zip")
read.table("C:\\Users\\Jon\\Downloads\\rprog_data_quiz1_data.zip")
read.table("C:\\Users\\Jon\Documents\\DataScience\\R\\Quiz1")
read.table("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1")
read.table("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv")
read.table("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv")
read.table("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv", header=true)
read.table("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv", header=TRUE)
read.csv("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv")
read.csv("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv",nrows=2 )
read.csv("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv",nrows=1, skip=46 )
read.csv("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv")
x<-read.csv("C:\\Users\\Jon\\Documents\\DataScience\\R\\Quiz1\\hw1_data.csv")
x
y<-x|ozone==NA|
y<-x|ozone==NA|
sf
which(is.na(x[[1]]))
length(which(is.na(x[[1]])))
length(which(!is.na(x[[1]])))
length(which(!is.na(x[[1]])))
which(!is.na(x[[1]]))
mean(which(!is.na(x[[1]])))
x|!is.na(x[[1]])|
1
mean(x|!is.na(x[[1]])|)
x|!is.na(x[1])|
1
x[!is.na(x[1])]
x[!is.na(x[1])]
x[!is.na(x[0])]
x[!is.na(x[2])]
x[is.na(x[1])]
x[is.na(x[[1]])
0
x[is.na(x[[1]])]
x[is.na(x[[1]])]
y <- subset(x, !is.na([1]))
y <- subset(x, !is.na(x[1]))
y
mean(y[1])
mean(y[[1])
mean(y[[1]])
y <- subset(x, x$ozone > 31)
y
y <- subset(x, x[1] > 31)
y
z <- subset(y, y[4] > 90)
z
mean(z, z[2])
mean(z, z[[2])
mean(z, z[[2]])
mean(z[[2]])
y <- subset(x, x[5] == 6)
y
max(y[[1]])
z <- subset(y, !is.na([1]))
z <- subset(y, !is.na([[1]]))
z <- subset(y, !is.na(y[[1]]))
z
maz(z[1])
max(z[1])
mean(z[[4]])
y <- subset(x, x[5] == 6)
y
mean(y[[4]])
y <- subset(x, x[5] == 5)
z <- subset(y, !is.na(y[[1]]))
max(z[[1]])
max(z[1])
z
y
x <- c(4, "a", TRUE)
classof(x)
class(x)
x <- c(3, 5, 1, 10, 12, 6)
x
x[x %in% 1:5] <- 0
x
x <- 4
class(x)
x
x <- c(4, "a", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2:3
x + y
class(x + y)
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
power <- function(exponent) {
function(x) x ^ exponent
}
square <- power(2)
cube <- power(3)
setwd("~/DataScience/R/Prog2")
source("cachematrix.R")
makeCacheMatrix()
x
source("cachematrix.R")
makeCacheMatrix()
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
ls
rm(list = ls())
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
setwd(../)
setwd(..)
setwd("~/DataScience/R/ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
cacheSolve(x)
B = matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
)
B = matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
b
B
cacheSolve(B)
cacheSolve(B)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
B = matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
B = matrix( c(2, 4, 3, 1), nrow=2, ncol=2)
cacheSolve(B)
B <- makeCacheMatrix()
B$set(matrix(1:4,2,2))
cacheSolve(B)
source("cachematrix.R")
cacheSolve(B)
B <- makeCacheMatrix(matrix(1:4,2,2))
B$get()
B$getinverse()
B$get()
B$getinverse()
B$set(matrix(5:8,2))
B$get()
cachSolve(B)
cacheSolve(B)
cacheSolve(B)
B$getinverse()
B$get()
B$setinverse
cacheSolve(B)
cacheSolve(B)
makeCacheMatrix()
makeCacheMatrix$setinverse
makeCacheMatrix$setinverse()
mean[1]
source("cachematrix.R")
makeCacheMatrix()
